<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<!--<configuration scan="true" scanPeriod="60 seconds" debug="false"-->
<!--	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--    xsi:noNamespaceSchemaLocation="http://www.padual.com/java/logback.xsd">-->

    <configuration  scan="true" scanPeriod="10 seconds">
	
	<!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="log" />
	  <!-- 定义日志文件名称 -->
    <property name="appName" value="iVillage"></property>
     
     
     <!-- 控制台输出 -->

	<!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!--
        	日志输出格式：
            %d表示日期时间，
            %thread表示线程名，
            %-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
            %msg：日志消息，
            %n是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--<springProfile name="dev">-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} -> [%thread] -> %-5level %logger{50} - %msg%n</pattern>
            <!--</springProfile>-->
            <!--<springProfile name="!dev">-->
                <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <!--</springProfile>-->
        </layout>
	</appender>
	
	<!-- 控制台输出 END -->
	
	
	<!-- 文件输出 -->
	 <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 -->
　　　　	<append>true</append> 
        <!--
	       	 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
	        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            	滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            	%i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
			            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
			            且maxHistory是30，则只保存最近30天的文件，删除之前的旧文件。注意，删除旧文件是时，
			            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>30</MaxHistory>
            <!--
			            当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
			            注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

	<!-- mybatis logger -->
    <logger name="org.mybatis" level="error"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
	<!-- 自己项目的 -->
	<logger name="com.yunbot" level="INFO"/>


<!--    输出到控制台-->
    <root level="INFO">
        <appender-ref ref="console" />
    </root>

<!--    输出文件-->
    <root level="INFO">
        <appender-ref ref="appLogAppender"/>
    </root>

</configuration>
